swagger: "2.0"
info:
  description: "An API contract for a service to store and authenticate users\nView at https://editor.swagger.io/"
  version: "1.0.0"
  title: "User Service"
  termsOfService: "http://example.com/terms/"
  contact:
    email: "tech@example.com"
  license:
    name: "MIT"
    url: "https://choosealicense.com/licenses/mit/"
host: "api.example.com"
basePath: "/v1"

tags:
- name: "user"
  description: "Operations about user"

schemes:
- "https"
- "http"

paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ApiResponse"

  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
          schema:
            $ref: "#/definitions/ApiResponse"

  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"

  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get a user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse"

    put:
      tags:
      - "user"
      summary: "Update the specified user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse"

    delete:
      tags:
      - "user"
      summary: "Delete the specified user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiResponse"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
