openapi: 3.0.1
info:
  title: User Service
  description: |-
    An API contract for a service to store and authenticate users
    View at https://editor.swagger.io/
  termsOfService: http://example.com/terms/
  contact:
    email: tech@example.com
  license:
    name: MIT
    url: https://choosealicense.com/licenses/mit/
  version: 1.0.0
servers:
- url: https://api.example.com/v1
- url: http://api.example.com/v1
tags:
- name: user
  description: Operations about user
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        403:
          description: Forbidden
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid username/password supplied
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /user/{username}:
    get:
      tags:
      - user
      summary: Get a user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        403:
          description: Forbidden
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: User not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - user
      summary: Update the specified user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        403:
          description: Forbidden
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: User not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete the specified user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        403:
          description: Forbidden
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: User not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
